// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id
  username      String?
  password  String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookings   Booking[]
  @@map("user")
}

model Cinema {
  id        String   @id @default(cuid())
  name      String
  location  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  screens   Screen[]

  @@map("cinema")
}

enum ScreenSize {
  LARGE
  MEDIUM
  SMALL
}

model Screen {
  id        String   @id @default(cuid())
  number    String
  size      ScreenSize
  rows      Int      // A~Jの行数
  columns   Int      // 列数
  capacity  Int      // 座席数
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cinemaId  String
  cinema    Cinema   @relation(fields: [cinemaId], references: [id], onDelete: Cascade)
  seats     Seat[]
  showings  Showing[]

  @@unique([cinemaId, number])
  @@map("screen")
}

model Seat {
  id        String   @id @default(cuid())
  row       String   // A~Jの文字列として保存
  column    Int      // 1~20,スクリーンによる
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  screenId  String
  screen    Screen   @relation(fields: [screenId], references: [id], onDelete: Cascade)
  bookings  BookingSeat[]

  @@unique([screenId, row, column])
  @@map("seat")
}

model Movie {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  releaseDate DateTime
  imageUrl    String?
  trailerUrl  String?
  genre       String
  director    String
  casts       String
  duration    Int      // 分単位
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  showings  Showing[]

  @@map("movie")
}

model Showing {
  id        String   @id @default(cuid())
  startTime DateTime
  endTime   DateTime
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  screenId  String
  screen    Screen   @relation(fields: [screenId], references: [id], onDelete: Cascade)
  movieId   String
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  bookings  Booking[]

  @@unique([screenId, startTime])
  @@map("showing")
}

enum BookingStatus {
  PENDING   // 予約中
  CONFIRMED // 確認済み
  CANCELLED // キャンセル
  COMPLETED // 予約完了
}

enum PaymentMethod {
  CREDIT_CARD
  CASH
  MOBILE_PAYMENT
}

model Booking {
  id              String        @id @default(cuid())
  bookingDate     DateTime      @default(now())
  totalPrice      Int
  status          BookingStatus @default(PENDING)
  bookingReference String       @unique
  paymentMethod   PaymentMethod?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  showingId       String
  showing         Showing       @relation(fields: [showingId], references: [id], onDelete: Cascade)
  seats           BookingSeat[]

  @@map("booking")
}

// 予約と座席の多対多関連付けのための中間テーブル
model BookingSeat {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  bookingId String
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  seatId    String
  seat      Seat     @relation(fields: [seatId], references: [id], onDelete: Cascade)

  @@unique([bookingId, seatId])
  @@map("booking_seat")
}